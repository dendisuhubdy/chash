#!/usr/bin/env python
import time
import glob
import threading
from subprocess import Popen, PIPE, check_output
import sys
import os
import re
import getopt

threads = 1
testcase_pattern = "\\.c$|(^|/)test.*\\.sh$"
default_path = ".."
default_compile_command = "clang"
default_compile_flags = "-Wall"

clang_hash_path = os.path.join(os.path.dirname(__file__), "../build/wrappers/")
os.environ["PATH"] = clang_hash_path + ":" + os.environ["PATH"]
default_hash_command = "clang-hash"
default_objhash_command = "hash-objectfile"


TAP = False
LOGLEVEL = 1
LOGLEVEL_DEBUG = 2
LOGLEVEL_NORMAL = 1
LOGLEVEL_QUIET = 0

console_lock = threading.Lock()

class COLOR:
    codes = ["BLACK", "RED", "GREEN", "YELLOW", "BLUE", "MAGENTA", "CYAN", "WHITE"]

    #following from Python cookbook, #475186
    @staticmethod
    def has_colours(stream):
        if not hasattr(stream, "isatty"):
            return False
        if not stream.isatty():
            return False # auto color only on TTYs
        try:
            import curses
            curses.setupterm()
            return curses.tigetnum("colors") > 2
        except:
            # guess false in case of error
            return False


    @staticmethod
    def format(text, colour="WHITE", bold = False):
        if type(COLOR.has_colours) is not bool:
            COLOR.has_colours = COLOR.has_colours(sys.stdout)

        """Colorize a string"""
        colour = COLOR.codes.index(colour.upper())
        bold = {True: 1, False: 0}[bold]
        if COLOR.has_colours:
            seq = "\x1b[%d;%dm" % (bold, 30+colour) + text + "\x1b[0m"
            return seq
        else:
            return text

def to_console(text):
    console_lock.acquire()
    sys.stdout.write(text)
    console_lock.release()

class Future:
    def __init__(self):
        self.value = None
        self.__set = False
        self.cond = threading.Condition()
    def get(self):
        if self.__set:
            return self.value
        self.cond.acquire()
        while not self.__set:
            self.cond.wait()
        self.cond.release()
        return self.value

    def set(self, value):
        self.cond.acquire()
        self.value = value
        self.__set = True
        self.cond.notifyAll()
        self.cond.release()


def test_case_open(test_case):
    try:
        fd = open(test_case);
    except:
        to_console(" Couldn't open test case: " + test_case + "\n")
        sys.exit(2)
    return fd

def get_tag(test_case, field, default = None):
    fd = test_case_open(test_case)
    value = default
    for line in fd.readlines():
        if field in line and ":" in line:
            value = line[line.index(":") + 1:-1].strip()
    fd.close()
    return value

def get_area(test_case, start, stop):
    fd = test_case_open(test_case)
    value = []
    dump = False
    for line in fd.readlines():
        if stop in line:
            dump = False
        if dump:
            value.append(line)
        if start in line:
            dump = True
    fd.close()
    return value

def get_variants(test_case):
    fd = test_case_open(test_case)
    content = fd.read()
    variant_pattern = "{{([a-zA-Z]+)(:.+?)?}}"
    variant_line_pattern = "{{([a-zA-Z]+)}}"

    variants = {}
    for variant in re.finditer(variant_pattern, content):
        variant = variant.group(1)
        line_tag = ("{{%s}}" % variant)
        # Is this variant already extracted?
        if not variant in variants:
            text = []
            for line in content.split("\n"):
                if re.search(variant_line_pattern, line):
                    if line_tag in line:
                        line = line.replace(line_tag, "")
                        text.append(line)
                    continue
                def replace(match):
                    if match.group(1) == variant:
                        assert match.group(2)
                        return match.group(2)[1:] # Strip ":"
                    return ""
                (line, _) = re.subn(variant_pattern, replace, line)
                text.append(line)
            variants[variant] = "\n".join(text)
    return variants

def check_asserts(asserts, results, idx):
    asserts = [x.strip() for x in asserts.split(",")]
    failed = False
    output = ""
    for A in asserts:
        if "==" in A:
            (LHS, RHS) = A.split("==")
            LHS = results[LHS.strip()][idx]
            RHS = results[RHS.strip()][idx]
            if LHS != RHS:
                output += COLOR.format(" ASSERT", "red", True) + " failed: " + A + "\n"
                failed = True
            elif LOGLEVEL >= LOGLEVEL_DEBUG:
                output += COLOR.format(" ASSERT", "green") + " holds: %s\n" % A
        elif "!=" in A:
            (LHS, RHS) = A.split("!=")
            LHS = results[LHS.strip()][idx]
            RHS = results[RHS.strip()][idx]
            if LHS == RHS:
                output += COLOR.format(" ASSERT", "red", True) + " failed: " + A + "\n"
                failed = True
            elif LOGLEVEL >= LOGLEVEL_DEBUG:
                output += COLOR.format(" ASSERT", "green") + " holds: %s\n" % A
        else:
            assert False, "Invalid assert: " + A

    return failed, output


def run_testcase_cleaner(basename):
    cruftfiles=list()
    cruftfiles.extend(glob.glob(basename + ".*.o"))
    cruftfiles.extend(glob.glob(basename + ".*.var.c"))
    cruftfiles.extend(glob.glob(basename + ".*.o.hash"))
    cruftfiles.extend(glob.glob(basename + ".*.o.clang-hash-stderr"))

    for cruft in cruftfiles:
        try:
            os.unlink(cruft)
        except OSError:
            pass
    return len(cruftfiles)

def run_command(cmd, stdin=None):
    output = "----- exec: " + cmd + "\n"

    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    if stdin:
        try:
            p.stdin.write(stdin)
        except:
            (stdout, stderr) = p.communicate()
            return 1, "BROKEN PIPE", stdout, stderr

    (stdout, stderr) = p.communicate()
    if stdout:
        output += "----- stdout -----\n"
        output += stdout
    if stderr:
        output += "----- stderr -----\n"
        output += COLOR.format(stderr, "yellow")
    p.wait()
    return p.returncode, output, stdout, stderr

def run_testcase_helper(testcase_opts, future):
    test_case = testcase_opts['test_case']
    check_name = testcase_opts['check-name']
    basename, ext = os.path.splitext(test_case)

    cruft = run_testcase_cleaner(basename)

    output = ""
    if TAP is False:
        output += COLOR.format("TEST", "blue", True) + " %s: %s (%d leftovers removed)\n" % \
                 (COLOR.format(test_case, "cyan"), COLOR.format(check_name, "yellow"),
                  cruft)

    start = time.time()
    if testcase_opts["test_case"].endswith(".c"):
        output += run_testcase_objecthash(testcase_opts)
    elif testcase_opts["test_case"].endswith(".sh"):
        output += run_testcase_shell(testcase_opts)
    duration = time.time() - start

    if TAP is False:
        to_console(output)
    else:
        known_to_fail = testcase_opts['check-known-to-fail']
        tap_status = "ok"
        if testcase_opts["passed"] and known_to_fail:
            tap_status = "not ok"
        if not testcase_opts["passed"] and not known_to_fail:
            tap_status = "not ok"

        output = output.split("\n") + ["duration %f" % duration]
        output = ["# " + x for x in output]
        output = "\n".join(output)
        to_console("%s %d - %s\n%s\n" % (
            tap_status, testcase_opts['test_id'],
            testcase_opts["test_case"],
            output))

    future.set(testcase_opts)

def run_testcase_shell(testcase_opts):
    known_to_fail = testcase_opts['check-known-to-fail']
    def fail_msg(fmt, *args):
        if known_to_fail:
            color, bold = "green", False
        else:
            color, bold = "red", True
        return COLOR.format(fmt % args, color, bold=bold) + "\n"

    output = ""
    cmd = "/bin/bash %s" % testcase_opts["test_case"]
    (ret, x, _, stderr) = run_command(cmd)

    if (LOGLEVEL >= LOGLEVEL_NORMAL and ret != 0 and not known_to_fail) \
       or LOGLEVEL >= LOGLEVEL_DEBUG:
        output += x

    if ret != 0:
        output += fail_msg("!!! Failure: %s failed with %d",
                           cmd, ret)

    testcase_opts['passed'] = (ret == 0)


    return output


def run_testcase_objecthash(test_case_opts):
    output = "" # Return value
    test_case = test_case_opts['test_case']
    basename, ext = os.path.splitext(test_case)

    # Gather information from test-case file
    known_to_fail = test_case_opts['check-known-to-fail']
    compile_command = get_tag(test_case, "compile-command", default_compile_command)
    hash_command = get_tag(test_case, "hash-command", default_hash_command)
    object_files_might_not_differ = get_tag(test_case, "obj-not-diff")
    compile_flags = get_tag(test_case, "compile-flags", default_compile_flags)
    variants = get_variants(test_case)

    # Add the testcase directory
    dirname = os.path.dirname(os.path.join(".", test_case))
    compile_flags += " -I %s" % (dirname)

    def fail_msg(fmt, *args):
        if known_to_fail:
            color, bold = "green", False
        else:
            color, bold = "red", True
        return COLOR.format(fmt % args, color, bold=bold) + "\n"

    failed = False

    results = {}

    for variant in sorted(variants):
        source_file = "{basename}.{variant}.var{ext}".format(
            basename=basename,
            variant=variant,
            ext=ext)
        object_file = "{basename}.{variant}.var.o".format(
            basename=basename,
            variant=variant)

        # Dump variant file
        with open(source_file, "w+") as fd:
            fd.write(variants[variant])

        assert os.path.exists(source_file)
        assert not os.path.exists(object_file)

        this_cc = get_tag(test_case, "compile-command-%s" % variant, compile_command)
        this_cflags = get_tag(test_case, "compile-flags-%s" % variant, compile_flags)

        cmd = "{compiler} -c {source_file} -o {object_file} {flags}".format(
            compiler=this_cc,
            source_file=source_file,
            object_file=object_file,
            flags=this_cflags)
        (ret_compiler, x, _, __) = run_command(cmd)
        assert os.path.exists(source_file)

        if (LOGLEVEL >= LOGLEVEL_NORMAL and ret_compiler != 0) and ret_compiler != 0 and not known_to_fail:
            output += x
        elif LOGLEVEL >= LOGLEVEL_DEBUG:
            output += x

        # Hash Object File
        if ret_compiler == 0:
            object_hash = check_output([default_objhash_command, object_file]).strip()
        else:
            object_hash = None
            output += fail_msg("!!! Failure: compile (%s) failed with %d",
                               variant, ret_compiler)
            failed = True

        #### Run Clang-Hash
        cmd = "{cmd} -fsyntax-only -c {source_file} -o {object_file} {flags}".format(
            cmd=hash_command,
            source_file=source_file,
            object_file=object_file, # Won't be overriden
            flags=this_cflags)
        (ret_hasher, x, _, stderr) = run_command(cmd)
        if (LOGLEVEL >= LOGLEVEL_NORMAL and ret_hasher != 0 and not known_to_fail) or LOGLEVEL >= LOGLEVEL_DEBUG :
            output += x
        ast_hash = None
        for line in stderr.split("\n"):
            if line.startswith("top-level-hash"):
                ast_hash = line.split(":")[1].strip()
        if ret_hasher != 0:
            output += fail_msg("!!! Failure: clang-hash (%s) failed with %d", variant, ret_hasher)
            failed = True
        elif not ast_hash:
            output += fail_msg("!!! Failure: Did not find top-level-hash in stderr")
            failed = True

        # Call clang-hash
        if LOGLEVEL >= LOGLEVEL_NORMAL:
            output += " {source_file} obj:{object_hash} ast:{ast_hash}\n".format(
                source_file=source_file,
                object_hash=object_hash,
                ast_hash=ast_hash)

        results[variant] = (object_hash, ast_hash)

    # Compare all hashes
    mapping = {}
    for var_1 in results:
        obj, ast = results[var_1]

        for var_2 in results:
            if var_2 <= var_1:
                continue
            other_obj, other_ast = results[var_2]
            if obj == other_obj and ast == other_ast:
                continue
            if obj != other_obj and ast != other_ast:
                continue

            if object_files_might_not_differ and obj == other_obj:
                continue

            output += fail_msg("!!! Failure: Different hashes")
            output += " {var_1} obj:{obj} ast:{ast}\n".format(**locals())
            output += " {var_2} obj:{other_obj} ast:{other_ast}\n".format(**locals())

            failed = True

    assert_ast = get_tag(test_case, "assert-ast")
    assert_obj = get_tag(test_case, "assert-obj")
    if assert_obj:
        (F, out) = check_asserts(assert_obj, results, 0)
        failed = failed or F
        output += out
    if assert_ast:
        (F, out) = check_asserts(assert_ast, results, 1)
        failed = failed or F
        output += out


    if failed:
        output += fail_msg("!!! Failed")

    test_case_opts['passed'] = not failed

    return output


def run_testcase(test_case):
    future = Future()
    if threading.active_count() >= threads:
        run_testcase_helper(test_case, future)
        future.get()
    else:
        t = threading.Thread(target = run_testcase_helper,
                             args = (test_case, future))
        t.start()
    return future

def run_test_suite(tests):
    tests_failed = 0
    tests_known_fail = 0

    running_tests = []

    idx = 1
    for test_case in tests:
        check_name = get_tag(test_case, "check-name")
        if not check_name:
            to_console(COLOR.format("WARN", 'yellow', True) + " test '%s' unhandled\n" % test_case)
            continue
        data = {
            'test_id': idx,
            'test_case': test_case,
            'check-name': check_name,
            'check-known-to-fail': get_tag(test_case, "check-known-to-fail"),
        }
        idx += 1
        running_tests.append(run_testcase(data))

    if TAP is True:
        to_console("%d..%d\n" %(1, len(running_tests)))

    for future in running_tests:
        test_case = future.get()
        if not test_case['passed']:
            tests_failed += 1
            if test_case['check-known-to-fail']:
                tests_known_fail += 1


    to_console("Out of %d tests, %d passed, %d failed (%d of them are known to fail).\n" \
               % (len(running_tests),
                  len(running_tests) - tests_failed,
                  tests_failed,
                  tests_known_fail))

    return tests_failed <= tests_known_fail

def usage():
    print "%s [-c] [-t threads] [-q] [-v] [test-cases...]" % sys.argv[0]
    print " if no test-cases are given, all in current directory are run"

def get_testcases(paths = ["."]):
    all_files = []
    for path in paths:
        if os.path.isfile(path):
            all_files.append(path)
        else:
            for root, subFolders, files in os.walk(path):
                for file in files:
                    path = os.path.join(root, file)
                    all_files.append(path)
    ret = []
    for fn in all_files:
        if re.search(testcase_pattern, fn) and not "var.c" in fn:
            ret.append(fn)

    return sorted(ret)

if __name__ == '__main__':
    opts, args = getopt.getopt(sys.argv[1:], "ht:qcvT")
    if len(args) == 0:
        args = ["."]

    for opt,arg in opts:
        if opt in ('-c', '--clean'):
            tests = get_testcases(args)
            for test in tests:
                basename,_ = os.path.splitext(test)
                run_testcase_cleaner(basename)
            sys.exit(0)
        if opt in ('-t', '--threads'):
            threads = int(arg)
            if threads < 1:
                print "invalid thread_count"
                usage()
                sys.exit(1)
        elif opt in ('-h', '--help'):
            usage()
            sys.exit(0)
        elif opt in ('-q', '--quiet'):
            LOGLEVEL = 0
        elif opt in ('-v', '--verbose'):
            LOGLEVEL = 2
        elif opt in ('-T'):
            TAP = True
        else:
            print "unkown option"
            assert False


    ret = run_test_suite(get_testcases(args))

    if ret:
        sys.exit(0)
    else:
        sys.exit(-1)
