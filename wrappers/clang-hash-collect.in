#!/usr/bin/python

import sys
import os
import hashlib
import logging
import re
import time
from subprocess import *


#TODO: put this in env variable? set via command line param in test-script
if "CLANG_HASH_OUTPUT_DIR" in os.environ:
    outputDir = os.environ["CLANG_HASH_OUTPUT_DIR"]
else:
    outputDir = "/home/cip/2015/yb90ifym/clang-hash/hash-projects/lua"

if not os.path.exists(outputDir):
    outputDir = None

def mkpath(path):
    try:
        os.makedirs(path)
    except OSError:
        pass

if __name__ == "__main__":
    args = sys.argv[1:]
    level = logging.INFO
    if "V" in os.environ:
        level = logging.DEBUG
    #logging.basicConfig(filename = "clang-hash.log", level=level)
    logging.debug(str(sys.argv))

    compiler = "${LLVM_C_COMPILER}"
    plugin = "${PROJECT_BINARY_DIR}/clang-plugin/libclang-hash.so"

    if os.environ.get('STOP_IF_SAME_HASH') or "-stop-if-same-hash" in args:
        try:
            args.remove("-stop-if-same-hash")
        except ValueError:
            pass
        args.extend(["-Xclang", "-plugin-arg-clang-hash", "-Xclang", "-stop-if-same-hash"])

    if os.environ.get('HASH_VERBOSE') or "-hash-verbose" in args:
        try:
            args.remove("-hash-verbose")
        except ValueError:
            pass
    args.extend(["-Xclang", "-plugin-arg-clang-hash", "-Xclang","-hash-verbose"])#, "-c", "-fsyntax-only"])
    if os.environ.get('NO_COMPILE'):
        args.extend(["-c", "-fsyntax-only"])

    start_time = time.time()
    x = Popen([compiler, "-fplugin=" + plugin] + args,
              stdin=sys.stdin, stdout=PIPE, stderr=PIPE)
    (stdout, stderr) = x.communicate()
    compileTime = int((time.time() - start_time) * 1e9) # nano
    sys.stdout.write(stdout)
    sys.stderr.write(stderr)
    retcode = x.wait()

    if "-c" in args and "-o" in args and "/dev/null" not in args:
        # Save Objectfile data
        objectfile = args[args.index("-o")+1]
        objectfile_hash = None
        if os.path.exists(objectfile):
            objectfile_hash = check_output(["${PROJECT_BINARY_DIR}/wrappers/hash-objectfile", objectfile]).strip()
            objectfile_data = open(objectfile).read()
        else:
            objectfile_data = None

        filename = ""
        for arg in args:
            if arg.endswith('.c'):
                filename = arg
                break

        if filename != "": # don't need non-C-files
        # Just use to set commit hash and project identifier from the outside
        # PROJECT=musl COMMIT_HASH=`git log -1 --pretty="%H"` make
            run_id = os.environ.get('RUN_ID', "0");
            record = {
                'project': os.environ.get("PROJECT"),
#                'commit-hash': os.environ.get("COMMIT_HASH"), # do not save this if with stopping compilation
                'filename': filename,
                'obj-file': objectfile,
                'return-code': retcode,
                'compile-duration': compileTime, # time the compiler was running (incl. parse-duration)
                'object-hash': objectfile_hash,
                'start-time': start_time,
                'run_id': int(run_id), # for run with stopping compilation
            }
            try:
                record['object-file-size'] = os.stat(objectfile).st_size
            except:
                pass

            lines = stderr.split("\n")
            for line in lines:
                if line.startswith("top-level-hash"):
                    record['ast-hash'] = line.split()[1]
                elif line.startswith("processed-bytes:"):
                    record['processed-bytes'] = int(line.split()[1])
                elif 0 == line.find("hash-time-ns:"):
                    record['hash-duration'] = int(line.split()[1])
                elif line.startswith("parse-time-ns:"):
                    record['parse-duration'] = int(line.split()[1])
                elif line.startswith("skipped: true"):
                    record['skipped'] = True
                elif line.startswith("element-hashes:"):
                    data = line[len('element-hashes:'):]
                    try:
                        record['element-hashes'] = eval(data)
                    except RuntimeError as e:
                        print e
                        pass
                elif line.startswith("hash-start-time-ns"):
                    record['hash-start-time'] = int(line.split()[1])

            if outputDir:
                outFilename = outputDir + "/" + objectfile + ".info"
                outputPath = outputDir + "/" + os.path.dirname(objectfile)
                mkpath(outputPath)
                f = open(outFilename, 'a')
                f.write(repr(record) + "\n")
                f.close()


    sys.exit(retcode)
